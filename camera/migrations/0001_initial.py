# Generated by Django 3.1 on 2020-08-31 10:46

import camera.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnalyticDisplay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_heat_map', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('store_hot_zone', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('gender', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('age', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('duration_of_visit', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('no_of_purchasing_visit', models.IntegerField()),
                ('no_of_missed_customers', models.IntegerField()),
                ('days_with_most_walkings', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('average_employee_count', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('average_line_length', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('time_analysis', models.ImageField(upload_to=camera.models.path_and_rename)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TotalDisplay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_walkings', models.IntegerField()),
                ('clients', models.CharField(max_length=200)),
                ('customer_flow', models.ImageField(upload_to=camera.models.path_and_rename)),
                ('number_of_family_member', models.IntegerField()),
                ('client_gender', models.CharField(max_length=200)),
                ('client_age', models.IntegerField()),
                ('client_purchase_amount', models.FloatField()),
                ('client_previous_visit_time', models.DateTimeField()),
                ('client_visits_this_month', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=200)),
                ('total_camera', models.IntegerField()),
                ('outer_camera_channel_no', models.CharField(max_length=200)),
                ('billing_camera_channel_no', models.CharField(max_length=200)),
                ('camera_sequence', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stores', to='camera.organization')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('age', models.PositiveIntegerField()),
                ('employee_media', models.FileField(upload_to=camera.models.path_and_rename)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='employees', to='camera.store')),
            ],
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_in', models.IntegerField()),
                ('total_out', models.IntegerField()),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='dailylogs', to='camera.store')),
            ],
        ),
        migrations.CreateModel(
            name='Analytic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('in_time', models.DateTimeField()),
                ('out_time', models.DateTimeField()),
                ('store_heat_map', models.FileField(default=None, upload_to=camera.models.path_and_rename)),
                ('store_hot_zone', models.FileField(default=None, upload_to=camera.models.path_and_rename)),
                ('employee', models.ForeignKey(default=None, on_delete=django.db.models.deletion.DO_NOTHING, related_name='analytics', to='camera.employee')),
            ],
        ),
        migrations.CreateModel(
            name='StoreManager',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='camera.user')),
                ('store', models.OneToOneField(default=None, on_delete=django.db.models.deletion.DO_NOTHING, to='camera.store')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('camera.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
